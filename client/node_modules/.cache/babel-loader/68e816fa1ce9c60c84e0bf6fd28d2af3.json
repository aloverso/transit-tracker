{"ast":null,"code":"import _classCallCheck from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/pivotal/workspace/transit-tracker/client/src/components/AddMode.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n        modes {\\n            name\\n            counter\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n     mutation addModeFunc($name: String!) {\\n         addMode(name: $name) {\\n             name\\n             counter\\n         }\\n     }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nvar ADD_MODE = gql(_templateObject());\nvar GET_MODES = gql(_templateObject2());\n\nvar AddMode =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddMode, _Component);\n\n  function AddMode() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddMode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddMode)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: ''\n    };\n    return _this;\n  }\n\n  _createClass(AddMode, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: this.state.name,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            name: e.target.value\n          });\n        },\n        type: \"text\",\n        placeholder: \"Mode of Transit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      })), React.createElement(Mutation, {\n        mutation: ADD_MODE,\n        variables: {\n          name: this.state.name\n        },\n        update: function update(store, _ref) {\n          var post = _ref.data.post;\n          var data = store.readQuery({\n            query: GET_MODES\n          });\n          data.modes.links.unshift(post);\n          store.writeQuery({\n            query: FEED_QUERY,\n            data: data\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, function (addModeFunc) {\n        return React.createElement(\"button\", {\n          onClick: addModeFunc,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, \"Submit\");\n      }));\n    }\n  }]);\n\n  return AddMode;\n}(Component);\n\nexport default AddMode;","map":{"version":3,"sources":["/Users/pivotal/workspace/transit-tracker/client/src/components/AddMode.js"],"names":["React","Component","Mutation","gql","ADD_MODE","GET_MODES","AddMode","state","name","e","setState","target","value","store","post","data","readQuery","query","modes","links","unshift","writeQuery","FEED_QUERY","addModeFunc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,QAAQ,GAAGD,GAAH,mBAAd;AASA,IAAME,SAAS,GAAGF,GAAH,oBAAf;;IAUMG,O;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE;AADA,K;;;;;;6BAMC;AAAA;;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,IADpB;AAEE,QAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,iBAAI,MAAI,CAACC,QAAL,CAAc;AAAEF,YAAAA,IAAI,EAAEC,CAAC,CAACE,MAAF,CAASC;AAAjB,WAAd,CAAJ;AAAA,SAFb;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC,iBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EASE,oBAAC,QAAD;AACE,QAAA,QAAQ,EAAER,QADZ;AAEE,QAAA,SAAS,EAAE;AAAEI,UAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AAAnB,SAFb;AAGE,QAAA,MAAM,EAAE,gBAACK,KAAD,QAA+B;AAAA,cAAbC,IAAa,QAArBC,IAAqB,CAAbD,IAAa;AACrC,cAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAAEC,YAAAA,KAAK,EAAEZ;AAAT,WAAhB,CAAb;AACAU,UAAAA,IAAI,CAACG,KAAL,CAAWC,KAAX,CAAiBC,OAAjB,CAAyBN,IAAzB;AACAD,UAAAA,KAAK,CAACQ,UAAN,CAAiB;AACfJ,YAAAA,KAAK,EAAEK,UADQ;AAEfP,YAAAA,IAAI,EAAJA;AAFe,WAAjB;AAID,SAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaG,UAACQ,WAAD;AAAA,eACC;AAAQ,UAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD;AAAA,OAbH,CATF,CADF;AA+BD;;;;EAvCmBtB,S;;AA0CtB,eAAeK,OAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nconst ADD_MODE = gql`\n     mutation addModeFunc($name: String!) {\n         addMode(name: $name) {\n             name\n             counter\n         }\n     }`\n\n\nconst GET_MODES = gql`\n    query {\n        modes {\n            name\n            counter\n        }\n    }\n`\n\n\nclass AddMode extends Component {\n  state = {\n    name: '',\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input\n            value={this.state.name}\n            onChange={e => this.setState({ name: e.target.value })}\n            type=\"text\"\n            placeholder=\"Mode of Transit\"\n          />\n        </div>\n        <Mutation\n          mutation={ADD_MODE}\n          variables={{ name: this.state.name }}\n          update={(store, { data: { post } }) => {\n            const data = store.readQuery({ query: GET_MODES })\n            data.modes.links.unshift(post)\n            store.writeQuery({\n              query: FEED_QUERY,\n              data\n            })\n          }}\n        >\n\n          {(addModeFunc) => (\n            <button onClick={addModeFunc}>\n              Submit\n            </button>\n          )}\n        </Mutation>\n      </div>\n    )\n  }\n}\n\nexport default AddMode"]},"metadata":{},"sourceType":"module"}