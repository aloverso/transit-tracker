{"ast":null,"code":"import _classCallCheck from \"/Users/pivotal/workspace/pinelist/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pivotal/workspace/pinelist/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pivotal/workspace/pinelist/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pivotal/workspace/pinelist/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pivotal/workspace/pinelist/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/pivotal/workspace/pinelist/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/pivotal/workspace/pinelist/client/src/containers/ListContainer.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createList($name: String!) {\\n    createList(name: $name) {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        {\\n          lists {\\n              name\\n              id\\n          }\\n        }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { inject, observer } from \"mobx-react\";\nimport { buildSchema, graphql } from \"graphql\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport { Mutation, Query } from \"react-apollo\";\nvar GET_LISTS = gql(_templateObject());\nvar CREATE_LIST = gql(_templateObject2());\n\nvar ListContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ListContainer, _Component);\n\n  function ListContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      listName: ''\n    };\n\n    _this.handleInput = function (event) {\n      _this.setState({\n        listName: event.target.value\n      });\n    };\n\n    _this.submitNewList = function () {\n      _this.setState({\n        listName: ''\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ListContainer, [{\n    key: \"render\",\n    value: function render() {\n      var input;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Mutation, {\n        mutation: CREATE_LIST,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, function (createList, _ref) {\n        var data = _ref.data;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          onSubmit: function onSubmit(e) {\n            e.preventDefault();\n            createList({\n              variables: {\n                type: input.value\n              }\n            });\n            input.value = \"\";\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          ref: function ref(node) {\n            input = node;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, \"Add Todo\")));\n      }), React.createElement(Query, {\n        query: GET_LISTS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, function (_ref2) {\n        var loading = _ref2.loading,\n            error = _ref2.error,\n            data = _ref2.data;\n        if (loading) return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, \"Loading...\");\n        if (error) return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \"Error :(\");\n        return data.lists.map(function (_ref3) {\n          var name = _ref3.name,\n              id = _ref3.id;\n          return React.createElement(\"div\", {\n            key: id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, name, \": \", id));\n        });\n      }));\n    }\n  }]);\n\n  return ListContainer;\n}(Component);\n\nexport default ListContainer;","map":{"version":3,"sources":["/Users/pivotal/workspace/pinelist/client/src/containers/ListContainer.js"],"names":["React","Component","inject","observer","buildSchema","graphql","ApolloClient","gql","Mutation","Query","GET_LISTS","CREATE_LIST","ListContainer","state","listName","handleInput","event","setState","target","value","submitNewList","input","createList","data","e","preventDefault","variables","type","node","loading","error","lists","map","name","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,YAA/B;AACA,SAAQC,WAAR,EAAqBC,OAArB,QAAmC,SAAnC;AACA,OAAOC,YAAP,IAAuBC,GAAvB,QAAiC,cAAjC;AACA,SAAQC,QAAR,EAAkBC,KAAlB,QAA8B,cAA9B;AAEA,IAAMC,SAAS,GAAGH,GAAH,mBAAf;AASA,IAAMI,WAAW,GAAGJ,GAAH,oBAAjB;;IAUMK,a;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE;AADJ,K;;UAIRC,W,GAAc,UAACC,KAAD,EAAW;AACvB,YAAKC,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAEE,KAAK,CAACE,MAAN,CAAaC;AADX,OAAd;AAGD,K;;UAEDC,a,GAAgB,YAAM;AACpB,YAAKH,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAE;AADE,OAAd;AAGD,K;;;;;;;6BAEQ;AACP,UAAIO,KAAJ;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAEV,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,UAACW,UAAD;AAAA,YAAeC,IAAf,QAAeA,IAAf;AAAA,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AACE,UAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AACbA,YAAAA,CAAC,CAACC,cAAF;AACAH,YAAAA,UAAU,CAAC;AAAEI,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,IAAI,EAAEN,KAAK,CAACF;AAAd;AAAb,aAAD,CAAV;AACAE,YAAAA,KAAK,CAACF,KAAN,GAAc,EAAd;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOE;AACE,UAAA,GAAG,EAAE,aAAAS,IAAI,EAAI;AACXP,YAAAA,KAAK,GAAGO,IAAR;AACD,WAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPF,EAYE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAZF,CADF,CADD;AAAA,OADH,CAJF,EAyBE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAElB,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,iBAA8B;AAAA,YAA3BmB,OAA2B,SAA3BA,OAA2B;AAAA,YAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,YAAXP,IAAW,SAAXA,IAAW;AAC7B,YAAIM,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACb,YAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AAEX,eAAOP,IAAI,CAACQ,KAAL,CAAWC,GAAX,CAAe;AAAA,cAAGC,IAAH,SAAGA,IAAH;AAAA,cAASC,EAAT,SAASA,EAAT;AAAA,iBACpB;AAAK,YAAA,GAAG,EAAEA,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAID,IAAJ,QAAYC,EAAZ,CADF,CADoB;AAAA,SAAf,CAAP;AAKD,OAVH,CAzBF,CADF;AAwCD;;;;EA7DyBjC,S;;AAiE5B,eAAeW,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport {buildSchema, graphql} from \"graphql\";\nimport ApolloClient, { gql} from \"apollo-boost\";\nimport {Mutation, Query} from \"react-apollo\";\n\nconst GET_LISTS = gql`\n        {\n          lists {\n              name\n              id\n          }\n        }`;\n\n\nconst CREATE_LIST = gql`\n  mutation createList($name: String!) {\n    createList(name: $name) {\n      id\n      name\n    }\n  }\n`;\n\n\nclass ListContainer extends Component {\n\n  state = {\n    listName: ''\n  };\n\n  handleInput = (event) => {\n    this.setState({\n      listName: event.target.value\n    })\n  }\n\n  submitNewList = () => {\n    this.setState({\n      listName: ''\n    })\n  }\n\n  render() {\n    let input;\n\n    return (\n      <div>\n        {/*<input type=\"text\" onChange={this.handleInput} value={this.state.listName}/>*/}\n        {/*<button onClick={this.submitNewList}>Submit</button>*/}\n\n        <Mutation mutation={CREATE_LIST}>\n          {(createList, { data }) => (\n            <div>\n              <form\n                onSubmit={e => {\n                  e.preventDefault();\n                  createList({ variables: { type: input.value } });\n                  input.value = \"\";\n                }}\n              >\n                <input\n                  ref={node => {\n                    input = node;\n                  }}\n                />\n                <button type=\"submit\">Add Todo</button>\n              </form>\n            </div>\n          )}\n        </Mutation>\n\n        <Query query={GET_LISTS}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error :(</p>;\n\n            return data.lists.map(({ name, id }) => (\n              <div key={id}>\n                <p>{name}: {id}</p>\n              </div>\n            ));\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\n\nexport default ListContainer;\n"]},"metadata":{},"sourceType":"module"}