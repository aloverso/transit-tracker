{"ast":null,"code":"import _classCallCheck from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/pivotal/workspace/transit-tracker/client/src/components/TransitMode.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n        modes {\\n            name\\n            counter\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation incrementModeFunc($id: Long!) {\\n        incrementMode(id: $id) {\\n            name\\n            counter\\n            id\\n        }\\n    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nvar INCREMENT_MODE = gql(_templateObject());\nvar GET_MODES = gql(_templateObject2());\n\nvar TransitMode =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TransitMode, _Component);\n\n  function TransitMode() {\n    _classCallCheck(this, TransitMode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TransitMode).apply(this, arguments));\n  }\n\n  _createClass(TransitMode, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, this.props.mode.name, \" (\", this.props.mode.counter, \")\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(Mutation, {\n        mutation: INCREMENT_MODE,\n        variables: {\n          id: this.props.mode.id\n        },\n        update: function update(store, _ref) {\n          var incMode = _ref.data.incMode;\n          var currentStore = store.readQuery({\n            query: GET_MODES\n          });\n          currentStore.modes.find(function (mode) {\n            return mode.id === incMode.id;\n          }).counter = incMode.counter;\n          store.writeQuery({\n            query: GET_MODES,\n            currentStore: currentStore\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, function (incrementModeFunc) {\n        return React.createElement(\"button\", {\n          onClick: incrementModeFunc,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"+\");\n      }))));\n    }\n  }]);\n\n  return TransitMode;\n}(Component);\n\nexport default TransitMode;","map":{"version":3,"sources":["/Users/pivotal/workspace/transit-tracker/client/src/components/TransitMode.js"],"names":["React","Component","gql","Mutation","INCREMENT_MODE","GET_MODES","TransitMode","props","mode","name","counter","id","store","incMode","data","currentStore","readQuery","query","modes","find","writeQuery","incrementModeFunc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAAQC,QAAR,QAAuB,cAAvB;AAEA,IAAMC,cAAc,GAAGF,GAAH,mBAApB;AASA,IAAMG,SAAS,GAAGH,GAAH,oBAAf;;IAUMI,W;;;;;;;;;;;;;6BACK;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAvB,QAA+B,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,OAA/C,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,QAAQ,EAAEN,cADZ;AAEE,QAAA,SAAS,EAAE;AAACO,UAAAA,EAAE,EAAE,KAAKJ,KAAL,CAAWC,IAAX,CAAgBG;AAArB,SAFb;AAGE,QAAA,MAAM,EAAE,gBAACC,KAAD,QAA8B;AAAA,cAAdC,OAAc,QAArBC,IAAqB,CAAdD,OAAc;AACpC,cAAME,YAAY,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAACC,YAAAA,KAAK,EAAEZ;AAAR,WAAhB,CAArB;AACAU,UAAAA,YAAY,CAACG,KAAb,CAAmBC,IAAnB,CAAwB,UAAAX,IAAI;AAAA,mBAAIA,IAAI,CAACG,EAAL,KAAYE,OAAO,CAACF,EAAxB;AAAA,WAA5B,EAAwDD,OAAxD,GAAkEG,OAAO,CAACH,OAA1E;AACAE,UAAAA,KAAK,CAACQ,UAAN,CAAiB;AACfH,YAAAA,KAAK,EAAEZ,SADQ;AAEfU,YAAAA,YAAY,EAAZA;AAFe,WAAjB;AAID,SAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaC,UAACM,iBAAD;AAAA,eACC;AAAQ,UAAA,OAAO,EAAEA,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD;AAAA,OAbD,CADF,CAFF,CADF,CADF;AA4BD;;;;EA9BuBpB,S;;AAiC1B,eAAeK,WAAf","sourcesContent":["import React, {Component} from 'react'\nimport gql from \"graphql-tag\";\nimport {Mutation} from \"react-apollo\";\n\nconst INCREMENT_MODE = gql`\n    mutation incrementModeFunc($id: Long!) {\n        incrementMode(id: $id) {\n            name\n            counter\n            id\n        }\n    }`\n\nconst GET_MODES = gql`\n    query {\n        modes {\n            name\n            counter\n            id\n        }\n    }\n`\n\nclass TransitMode extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <span>{this.props.mode.name} ({this.props.mode.counter})</span>\n          <span>\n            <Mutation\n              mutation={INCREMENT_MODE}\n              variables={{id: this.props.mode.id}}\n              update={(store, {data: {incMode}}) => {\n                const currentStore = store.readQuery({query: GET_MODES})\n                currentStore.modes.find(mode => mode.id === incMode.id).counter = incMode.counter\n                store.writeQuery({\n                  query: GET_MODES,\n                  currentStore\n                })\n              }}\n            >\n\n            {(incrementModeFunc) => (\n              <button onClick={incrementModeFunc}>\n                +\n              </button>\n            )}\n          </Mutation>\n      </span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TransitMode"]},"metadata":{},"sourceType":"module"}