{"ast":null,"code":"import _classCallCheck from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/pivotal/workspace/transit-tracker/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/pivotal/workspace/transit-tracker/client/src/components/TransitMode.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation incrementModeFunc($id: Long!) {\\n        incrementMode(id: $id) {\\n            name\\n            counter\\n            id\\n        }\\n    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nvar INCREMENT_MODE = gql(_templateObject());\n\nvar TransitMode =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TransitMode, _Component);\n\n  function TransitMode() {\n    _classCallCheck(this, TransitMode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TransitMode).apply(this, arguments));\n  }\n\n  _createClass(TransitMode, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, this.props.mode.name, \" (\", this.props.mode.counter, \")\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(Mutation, {\n        mutation: INCREMENT_MODE,\n        variables: {\n          id: this.props.mode.id\n        } // update={(store, {data: {inc}}) => {\n        //   console.log(addMode)\n        //   const currentStore = store.readQuery({query: GET_MODES})\n        //   currentStore.modes.unshift(addMode)\n        //   store.writeQuery({\n        //     query: GET_MODES,\n        //     currentStore\n        //   })\n        // }}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, function (incrementModeFunc) {\n        return React.createElement(\"button\", {\n          onClick: incrementModeFunc,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \"+\");\n      }))));\n    }\n  }]);\n\n  return TransitMode;\n}(Component);\n\nexport default TransitMode;","map":{"version":3,"sources":["/Users/pivotal/workspace/transit-tracker/client/src/components/TransitMode.js"],"names":["React","Component","gql","INCREMENT_MODE","TransitMode","props","mode","name","counter","id","incrementModeFunc"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,cAAc,GAAGD,GAAH,mBAApB;;IASME,W;;;;;;;;;;;;;6BACK;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAvB,QAA+B,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,OAA/C,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,QAAQ,EAAEL,cADZ;AAEE,QAAA,SAAS,EAAE;AAACM,UAAAA,EAAE,EAAE,KAAKJ,KAAL,CAAWC,IAAX,CAAgBG;AAArB,SAFb,CAGE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAcC,UAACC,iBAAD;AAAA,eACC;AAAQ,UAAA,OAAO,EAAEA,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD;AAAA,OAdD,CADF,CAFF,CADF,CADF;AA6BD;;;;EA/BuBT,S;;AAkC1B,eAAeG,WAAf","sourcesContent":["import React, {Component} from 'react'\nimport gql from \"graphql-tag\";\n\nconst INCREMENT_MODE = gql`\n    mutation incrementModeFunc($id: Long!) {\n        incrementMode(id: $id) {\n            name\n            counter\n            id\n        }\n    }`\n\nclass TransitMode extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <span>{this.props.mode.name} ({this.props.mode.counter})</span>\n          <span>\n            <Mutation\n              mutation={INCREMENT_MODE}\n              variables={{id: this.props.mode.id}}\n              // update={(store, {data: {inc}}) => {\n              //   console.log(addMode)\n              //   const currentStore = store.readQuery({query: GET_MODES})\n              //   currentStore.modes.unshift(addMode)\n              //   store.writeQuery({\n              //     query: GET_MODES,\n              //     currentStore\n              //   })\n              // }}\n            >\n\n            {(incrementModeFunc) => (\n              <button onClick={incrementModeFunc}>\n                +\n              </button>\n            )}\n          </Mutation>\n      </span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TransitMode"]},"metadata":{},"sourceType":"module"}